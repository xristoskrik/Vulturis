// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: ordered_prouducts.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createOrderedProduct = `-- name: CreateOrderedProduct :one
INSERT INTO ordered_products (order_code, user_uuid, product_code,  amount)
VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id, order_code, user_uuid, product_code, amount
`

type CreateOrderedProductParams struct {
	OrderCode   uuid.UUID
	UserUuid    uuid.UUID
	ProductCode int32
	Amount      int32
}

func (q *Queries) CreateOrderedProduct(ctx context.Context, arg CreateOrderedProductParams) (OrderedProduct, error) {
	row := q.db.QueryRowContext(ctx, createOrderedProduct,
		arg.OrderCode,
		arg.UserUuid,
		arg.ProductCode,
		arg.Amount,
	)
	var i OrderedProduct
	err := row.Scan(
		&i.ID,
		&i.OrderCode,
		&i.UserUuid,
		&i.ProductCode,
		&i.Amount,
	)
	return i, err
}

const deleteOrderedProductByCode = `-- name: DeleteOrderedProductByCode :exec
delete from ordered_products WHERE id = $1
`

func (q *Queries) DeleteOrderedProductByCode(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrderedProductByCode, id)
	return err
}

const deleteOrderedProductByOrderCode = `-- name: DeleteOrderedProductByOrderCode :exec
delete from ordered_products WHERE order_code = $1
`

func (q *Queries) DeleteOrderedProductByOrderCode(ctx context.Context, orderCode uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOrderedProductByOrderCode, orderCode)
	return err
}

const deleteOrderedProductByUserUUID = `-- name: DeleteOrderedProductByUserUUID :exec
delete from ordered_products WHERE user_uuid = $1
`

func (q *Queries) DeleteOrderedProductByUserUUID(ctx context.Context, userUuid uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOrderedProductByUserUUID, userUuid)
	return err
}

const deleteOrderedProducts = `-- name: DeleteOrderedProducts :exec
delete  from ordered_products
`

func (q *Queries) DeleteOrderedProducts(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteOrderedProducts)
	return err
}

const getOrderedProduct = `-- name: GetOrderedProduct :one
SELECT id, order_code, user_uuid, product_code, amount FROM ordered_products WHERE $1 = ordered_products.id
`

func (q *Queries) GetOrderedProduct(ctx context.Context, id int32) (OrderedProduct, error) {
	row := q.db.QueryRowContext(ctx, getOrderedProduct, id)
	var i OrderedProduct
	err := row.Scan(
		&i.ID,
		&i.OrderCode,
		&i.UserUuid,
		&i.ProductCode,
		&i.Amount,
	)
	return i, err
}

const getOrderedProductByOrderCode = `-- name: GetOrderedProductByOrderCode :one
SELECT id, order_code, user_uuid, product_code, amount FROM ordered_products WHERE $1 = ordered_products.order_code
`

func (q *Queries) GetOrderedProductByOrderCode(ctx context.Context, orderCode uuid.UUID) (OrderedProduct, error) {
	row := q.db.QueryRowContext(ctx, getOrderedProductByOrderCode, orderCode)
	var i OrderedProduct
	err := row.Scan(
		&i.ID,
		&i.OrderCode,
		&i.UserUuid,
		&i.ProductCode,
		&i.Amount,
	)
	return i, err
}

const getOrderedProductByUserUUID = `-- name: GetOrderedProductByUserUUID :one
SELECT id, order_code, user_uuid, product_code, amount FROM ordered_products WHERE $1 = ordered_products.user_uuid
`

func (q *Queries) GetOrderedProductByUserUUID(ctx context.Context, userUuid uuid.UUID) (OrderedProduct, error) {
	row := q.db.QueryRowContext(ctx, getOrderedProductByUserUUID, userUuid)
	var i OrderedProduct
	err := row.Scan(
		&i.ID,
		&i.OrderCode,
		&i.UserUuid,
		&i.ProductCode,
		&i.Amount,
	)
	return i, err
}

const updateOrderedProduct = `-- name: UpdateOrderedProduct :one
UPDATE ordered_products
SET order_code = $1, user_uuid = $2, product_code = $3, amount = $4
WHERE id = $5
RETURNING id, order_code, user_uuid, product_code, amount
`

type UpdateOrderedProductParams struct {
	OrderCode   uuid.UUID
	UserUuid    uuid.UUID
	ProductCode int32
	Amount      int32
	ID          int32
}

func (q *Queries) UpdateOrderedProduct(ctx context.Context, arg UpdateOrderedProductParams) (OrderedProduct, error) {
	row := q.db.QueryRowContext(ctx, updateOrderedProduct,
		arg.OrderCode,
		arg.UserUuid,
		arg.ProductCode,
		arg.Amount,
		arg.ID,
	)
	var i OrderedProduct
	err := row.Scan(
		&i.ID,
		&i.OrderCode,
		&i.UserUuid,
		&i.ProductCode,
		&i.Amount,
	)
	return i, err
}

const updateOrderedProductAmount = `-- name: UpdateOrderedProductAmount :one
UPDATE ordered_products SET amount = $1
WHERE id = $2
RETURNING id, order_code, user_uuid, product_code, amount
`

type UpdateOrderedProductAmountParams struct {
	Amount int32
	ID     int32
}

func (q *Queries) UpdateOrderedProductAmount(ctx context.Context, arg UpdateOrderedProductAmountParams) (OrderedProduct, error) {
	row := q.db.QueryRowContext(ctx, updateOrderedProductAmount, arg.Amount, arg.ID)
	var i OrderedProduct
	err := row.Scan(
		&i.ID,
		&i.OrderCode,
		&i.UserUuid,
		&i.ProductCode,
		&i.Amount,
	)
	return i, err
}

const updateOrderedProductOrderCode = `-- name: UpdateOrderedProductOrderCode :one
UPDATE ordered_products SET order_code = $1
WHERE id = $2
RETURNING id, order_code, user_uuid, product_code, amount
`

type UpdateOrderedProductOrderCodeParams struct {
	OrderCode uuid.UUID
	ID        int32
}

func (q *Queries) UpdateOrderedProductOrderCode(ctx context.Context, arg UpdateOrderedProductOrderCodeParams) (OrderedProduct, error) {
	row := q.db.QueryRowContext(ctx, updateOrderedProductOrderCode, arg.OrderCode, arg.ID)
	var i OrderedProduct
	err := row.Scan(
		&i.ID,
		&i.OrderCode,
		&i.UserUuid,
		&i.ProductCode,
		&i.Amount,
	)
	return i, err
}

const updateOrderedProductProductCode = `-- name: UpdateOrderedProductProductCode :one
UPDATE ordered_products SET product_code = $1
WHERE id = $2
RETURNING id, order_code, user_uuid, product_code, amount
`

type UpdateOrderedProductProductCodeParams struct {
	ProductCode int32
	ID          int32
}

func (q *Queries) UpdateOrderedProductProductCode(ctx context.Context, arg UpdateOrderedProductProductCodeParams) (OrderedProduct, error) {
	row := q.db.QueryRowContext(ctx, updateOrderedProductProductCode, arg.ProductCode, arg.ID)
	var i OrderedProduct
	err := row.Scan(
		&i.ID,
		&i.OrderCode,
		&i.UserUuid,
		&i.ProductCode,
		&i.Amount,
	)
	return i, err
}

const updateOrderedProductUserUUID = `-- name: UpdateOrderedProductUserUUID :one
UPDATE ordered_products SET user_uuid = $1
WHERE id = $2
RETURNING id, order_code, user_uuid, product_code, amount
`

type UpdateOrderedProductUserUUIDParams struct {
	UserUuid uuid.UUID
	ID       int32
}

func (q *Queries) UpdateOrderedProductUserUUID(ctx context.Context, arg UpdateOrderedProductUserUUIDParams) (OrderedProduct, error) {
	row := q.db.QueryRowContext(ctx, updateOrderedProductUserUUID, arg.UserUuid, arg.ID)
	var i OrderedProduct
	err := row.Scan(
		&i.ID,
		&i.OrderCode,
		&i.UserUuid,
		&i.ProductCode,
		&i.Amount,
	)
	return i, err
}
