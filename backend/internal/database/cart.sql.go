// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createCart = `-- name: CreateCart :one
INSERT INTO cart (user_uuid, product_code,  amount)
VALUES (
    $1,
    $2,
    $3
)
RETURNING id, user_uuid, product_code, amount
`

type CreateCartParams struct {
	UserUuid    uuid.UUID
	ProductCode int32
	Amount      int32
}

func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, createCart, arg.UserUuid, arg.ProductCode, arg.Amount)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserUuid,
		&i.ProductCode,
		&i.Amount,
	)
	return i, err
}

const deleteCartByID = `-- name: DeleteCartByID :exec
delete from cart WHERE id = $1
`

func (q *Queries) DeleteCartByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCartByID, id)
	return err
}

const deleteCarts = `-- name: DeleteCarts :exec
delete  from cart
`

func (q *Queries) DeleteCarts(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteCarts)
	return err
}

const getCart = `-- name: GetCart :one
SELECT id, user_uuid, product_code, amount FROM cart WHERE $1 = cart.id
`

func (q *Queries) GetCart(ctx context.Context, id int32) (Cart, error) {
	row := q.db.QueryRowContext(ctx, getCart, id)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserUuid,
		&i.ProductCode,
		&i.Amount,
	)
	return i, err
}

const getCartByUserUUID = `-- name: GetCartByUserUUID :one
SELECT id, user_uuid, product_code, amount FROM cart WHERE $1 = cart.user_uuid
`

func (q *Queries) GetCartByUserUUID(ctx context.Context, userUuid uuid.UUID) (Cart, error) {
	row := q.db.QueryRowContext(ctx, getCartByUserUUID, userUuid)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserUuid,
		&i.ProductCode,
		&i.Amount,
	)
	return i, err
}

const updateCart = `-- name: UpdateCart :one
UPDATE cart
SET user_uuid = $1, product_code = $2, amount = $3
WHERE id = $4
RETURNING id, user_uuid, product_code, amount
`

type UpdateCartParams struct {
	UserUuid    uuid.UUID
	ProductCode int32
	Amount      int32
	ID          int32
}

func (q *Queries) UpdateCart(ctx context.Context, arg UpdateCartParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, updateCart,
		arg.UserUuid,
		arg.ProductCode,
		arg.Amount,
		arg.ID,
	)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserUuid,
		&i.ProductCode,
		&i.Amount,
	)
	return i, err
}

const updateCartProductAmount = `-- name: UpdateCartProductAmount :one
UPDATE cart SET amount = $1
WHERE id = $2
RETURNING id, user_uuid, product_code, amount
`

type UpdateCartProductAmountParams struct {
	Amount int32
	ID     int32
}

func (q *Queries) UpdateCartProductAmount(ctx context.Context, arg UpdateCartProductAmountParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, updateCartProductAmount, arg.Amount, arg.ID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserUuid,
		&i.ProductCode,
		&i.Amount,
	)
	return i, err
}

const updateCartProductCode = `-- name: UpdateCartProductCode :one
UPDATE cart SET product_code = $1
WHERE id = $2
RETURNING id, user_uuid, product_code, amount
`

type UpdateCartProductCodeParams struct {
	ProductCode int32
	ID          int32
}

func (q *Queries) UpdateCartProductCode(ctx context.Context, arg UpdateCartProductCodeParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, updateCartProductCode, arg.ProductCode, arg.ID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserUuid,
		&i.ProductCode,
		&i.Amount,
	)
	return i, err
}

const updateCartUserUUID = `-- name: UpdateCartUserUUID :one
UPDATE cart SET user_uuid = $1
WHERE id = $2
RETURNING id, user_uuid, product_code, amount
`

type UpdateCartUserUUIDParams struct {
	UserUuid uuid.UUID
	ID       int32
}

func (q *Queries) UpdateCartUserUUID(ctx context.Context, arg UpdateCartUserUUIDParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, updateCartUserUUID, arg.UserUuid, arg.ID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserUuid,
		&i.ProductCode,
		&i.Amount,
	)
	return i, err
}
